using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;

namespace AIChef.Server.ChatEndPoint
{
    public class ChatRequest
    {
        // Required
        // The OpenAI model to use in the request
        [Required]
        public string Model { get; set; } = "gpt-3.5-turbo";

        // Required
        // A list of messages representing the chat with the AI model
        [Required]
        public ChatMessage[] Messages { get; set; } = Array.Empty<ChatMessage>();

        // A list of functions the model may generate JSON inputs for
        public ChatFunction[]? Functions { get; set; }

        // Controls how the model responds to function calls.
        // "none": model will not call a function
        // "auto": default if functions are present - model may pick a function or may generate a message for the user
        // {"name": "function_name"}: forces the model to call that function
        [JsonPropertyName("function_call")]
        public object? FunctionCall { get; set; }

        // A value between 0 and 2 - higher values will be more random,
        // lower values will be more focused and deterministic
        // Either change this or top_p but not both
        // Defaults to 1
        public float? Temperature { get; set; }

        // A value between 0 and 1. A value of 0.1 means only the tokens
        // comprising the top 10% probability will be considered
        // Either change this or temperature, but not both
        // Defaults to 1
        [JsonPropertyName("top_p")]
        public float? TopP { get; set; }

        // How many alternative responses to generate for each input message
        // Defaults to 1
        public int? N { get; set; }

        // Up to 4 sequences where the API will stop generating further tokens
        // Defaults to null
        public string[]? Stop { get; set; }

        // The maximum number of tokens to generate in the response
        // Defaults to the selected model's maximum supported tokens
        [JsonPropertyName("max_tokens")]
        public int? MaxTokens { get; set; }

        // A number between -2.0 and 2.0. Positive values penalize new tokens
        // based on whether they've appeared so far, increasing the model's
        // likelihood to talk about new topics
        // Defaults to 0
        [JsonPropertyName("presence_penalty")]
        public float? PresencePenalty { get; set; }

        // A number between -2.0 and 2.0. Positive values penalize new tokens
        // based on their existing frequency in the text so far, reducing
        // the model's likelihood to repeat the same line verbatim
        // Defaults to 0
        [JsonPropertyName("frequency_penalty")]
        public float? FrequencyPenalty { get; set; }

        // An optional ID representing the end user, which can help OpenAI 
        // monitor and detect abuse
        public string? User { get; set; }
    }

    public class ChatMessage
    {
        // "system" role - prompt for "setting up" the conversation
        // "user" role - message from the user that the model should respond to
        // "assistant" role - the AI model's responses
        [Required]
        public string? Role { get; set; } // "system", "user", or "assistant"

        // The content of the message sent by the indicated role
        public string? Content { get; set; }

        // An optional name identifying the author of the message
        // If the Message Role is "function", this is the name of the function
        public string? Name { get; set; }

        // The name and arguments of a function that should be called,
        // as generated by the model
        [JsonPropertyName("function_call")]
        public ChatFunctionResponse? FunctionCall { get; set; }
    }

    public class ChatResponse
    {
        // The unique ID of the generated response
        public string? Id { get; set; }

        // The type of response being sent by the model. Check the
        // <a href="https://platform.openai.com/docs/api-reference/">OpenAI docs</a>
        // for reference of the object's schema
        public string? Object { get; set; }

        // Timestamp for when the response was generated
        public int? Created { get; set; }

        // An array of generated responses by the AI. The length of this
        // array will match the N property of the request.
        public ChatResponseChoice[]? Choices { get; set; }

        // How many tokens were used to generate this response
        public Usage? Usage { get; set; }
    }

    public class ChatResponseChoice
    {
        // The index in the array of choices where this option lives
        public int? Index { get; set; }

        // The generated message in response
        public ChatMessage? Message { get; set; }

        // Why the model stopped generating this response - i.e. stopped
        // because it was completed, the token limit was exceeded, or it hit a 
        // stop sequence defined by the request
        [JsonPropertyName("finish_reason")]
        public string? FinishReason { get; set; }
    }

    public class ChatFunction
    {
        // The name of the function to be called. Must be
        // a-z, A-Z, 0-9, underscores, or dashes. Max length
        // of 64 characters
        [Required]
        [StringLength(64)]
        public string? Name { get; set; }

        // A description of what the function does
        public string? Description { get; set; }

        // The parameters the function accepts, as a
        // JSON Schema object
        // See the <a href="https://platform.openai.com/docs/guides/gpt/function-calling">guide</a>
        // from OpenAI or <a href="https://json-schema.org/understanding-json-schema/">JSON Schema</a> 
        // for reference
        public object? Parameters { get; set; }

        public class Parameter
        {
                // The JSON type of this parameter
                public string? Type { get; set; }

                // A description of this paramter to give the AI context on how to use it
                public string? Description { get; set; }

                // If the type is an object, this defines each property of that object
                public object? Properties { get; set; }

                // An array of properties which are required for this parameter, if it is
            // an object type
                public string[]? Required { get; set; }
        }
        public class Property
        {
                // The JSON type of this property
                public string? Type { get; set; }

                // A desciption of this property to give the AI context on how to use it
                public string? Description { get; set; }

                // If this property is an array, this is a JSON type definition for the items
            // contained in the array
                public string? Items { get; set; }
        }
    }

    public class Result<T>
    {
        // If successful, Data is the item that was attempted to be received
        public T? Data { get; set; }

        // If unsuccessful, the exception that may have been thrown when trying
        // to obtain the Data
        public Exception? Exception { get; set; }

        // An error message indicating what went wrong if the Data could not be obtained
        public string? ErrorMessage { get; set; }
    }

    public class ChatFunctionResponse
    {
        // The name of the function which the model would like to call
        public string? Name { get; set; }

        // A JSON object which can be used as arguments to complete the function
        // which the AI would like to call
        public string? Arguments { get; set; }
    }

    public class Usage
    {
        // How many tokens were used when reading the prompt
        [JsonPropertyName("prompt_tokens")]
        public int? PromptTokens { get; set; }

        // How many tokens were used when generating a response
        // to the prompt
        [JsonPropertyName("completion_tokens")]
        public int? CompletionTokens { get; set; }

        // How many tokens were used in total for the request
        [JsonPropertyName("total_tokens")]
        public int? TotalTokens { get; set; }
    }

    public class ImageGenerationRequest
    {
        // A text description of the image you would like to generate
        public string? Prompt { get; set; }

        // How many image options should be generated
        // This is optional, and defaults to 1 if not specified
        public int N { get; set; } = 1;

        // The size of the image(s) that should be generated.
        // Valid options are:
        //
        // "256x256"
        // "512x512"
        // "1024x1024"
        //
        // Defaults to 1024x1024
        public string? Size { get; set; } = "512x512"; // "256x256", "512x512", or "1024x1024"

        // The format of the response. Either "url" or "b64_json". Defaults to "url"
        [JsonPropertyName("response_format")]
        public string? ResponseFormat { get; set; } = "url"; // "url" or "b64_json"

        // A unique ID of the user requesting this image - optional
        public string? User { get; set; }
    }

}